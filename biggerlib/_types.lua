---@meta BiggerLib

---@class ItemData Inventory item data to be cached - gives ability to notify item via packname and slot2
---@field actualItemName string Name of the item in-game
---@field notifyPackName string Which backpack/container in TL Inventory the object is in
---@field notifyInvSlot2 string Which slot of the container the item is in

---@class TopLevelInventoryItem
---@field ItemSlotID number
---@field Item Option(Item)
---@field Name string

---@class BagInventory : ZenTable

---@class Inventory : ZenTable
---@field topLevelInventory TopLevelInventoryItem[]
---@field bagInventory BagInventory
---@field openTopLevelInventorySlot Option(number)

---@class Option A type based on Rust option for handling either a value or nil
---@field ClassName string The name of the class. (Option)
---@field protected _v any The value contained in the Option, if any.
---@field protected _s boolean A boolean indicating whether the Option contains a value (true) or is None (false).
---@field protected __index table A table containing the Option methods.
---@field protected _new fun(value:any):Option A constructor for an Option containing a value.
---@field None Option A static representation of an empty Option.
---@field Some fun(value:any):Option A constructor for an Option containing a value.
---@field Wrap fun(value:any):Option A constructor that wraps a value in an Option, or returns None if the value is nil.
---@field Is fun(obj:any):boolean A method to check if an object is an Option.
---@field Assert fun(obj:any) A method to assert that an object is an Option.
---@field Deserialize fun(data:table):Option A method to deserialize an Option from a table.
---@field Serialize fun(self:Option):table A method to serialize an Option to a table.
---@field Match fun(self:Option, matches:table):any A method to handle the contents of an Option based on provided functions for Some and None.
---@field IsSome fun(self:Option):boolean A method to check if the Option contains a value.
---@field IsNone fun(self:Option):boolean A method to check if the Option is empty (None).
---@field Expect fun(self:Option, msg:string):any A method to return the contained value or raise an error with the provided message if the Option is None.
---@field ExpectNone fun(self:Option, msg:string) A method to assert that the Option is None or raise an error with the provided message.
---@field Unwrap fun(self:Option):any A method to return the contained value or raise an error if the Option is None.
---@field UnwrapOr fun(self:Option, default:any):any A method to return the contained value or a default value if the Option is None.
---@field UnwrapOrElse fun(self:Option, defaultFunc:function):any A method to return the contained value or the result of a function if the Option is None.
---@field And fun(self:Option, optB:Option):Option A method to return the second Option if the first is Some, otherwise None.
---@field AndThen fun(self:Option, andThenFunc:function):Option A method to transform the contained value with a function if the Option is Some, otherwise None.
---@field Or fun(self:Option, optB:Option):Option A method to return the first Option if it is Some, otherwise the second.
---@field OrElse fun(self:Option, orElseFunc:function):Option A method to return the first Option if it is Some, otherwise the result of a function.
---@field XOr fun(self:Option, optB:Option):Option A method to return the first Option if only one of the two Options is Some, otherwise None.
---@field Filter fun(self:Option, predicate:function):Option A method to return the Option if it is Some and the predicate returns true, otherwise None.
---@field Contains fun(self:Option, value:any):boolean A method to check if the Option is Some and contains the specified value.
---@field protected __tostring fun(self:Option):string A metamethod to get a string representation of the Option.
---@field protected __eq fun(self:Option, opt:Option):boolean A metamethod to check equality between two Options.

-- Metaprogramming
--- Define a metatable with utility methods for tables
--- @class ZenTable
--- @field insert fun(self:ZenTable, value:any)
--- @field contains fun(self:ZenTable, value:any):boolean
--- @field remove fun(self:ZenTable, value:any):boolean
--- @field map fun(self:ZenTable, func:function):table
--- @field forEach fun(self:ZenTable, func:function)
--- @field isarray fun(self:ZenTable):boolean
--- @field push fun(self:ZenTable, ...)
--- @field clear fun(self:ZenTable)
--- @field filter fun(self:ZenTable, func:function, retainkeys:boolean|nil):table
--- @field match fun(self:ZenTable, func:function):any
--- @field concat fun(self:ZenTable, sep:string|nil, i:number|nil, j:number|nil):string
--- @field find fun(self:ZenTable, value:any):number|nil
--- @field count fun(self:ZenTable, value:any):number
--- @field keys fun(self:ZenTable):table
--- @field clone fun(self:ZenTable):ZenTable
